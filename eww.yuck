(defpoll volume :interval "1s"
  "scripts/getvol")

(defpoll battery :interval "1s"
  "scripts/getvol")

(defpoll hour :interval "1m"
  "date \"+%H\""
  )
(defpoll minute :interval "10s"
  "date \"+%M\""
  )

(deflisten workspace
  "scripts/getworkspace")


(defwidget volume_slider []
  (box :orientation "h" 
       :class "metric volume" 
       :space-evenly true 
    (box :class "label volume" "")
    ;; (box volume)
    (scale 
      :min 0 
      :max 101 
      :value volume 
      :onchange "amixer sset 'Master' {}%"
    )
  )
)

(defwidget cpu_info []
  (box :orientation "h" 
       :class "metric cpu" 
       :space-evenly true 
    (box :class "label cpu" "")
    (box {round(EWW_CPU.avg, 0)}"%")

  )
)

(defwidget memory_info []
  (box :orientation "h" 
       :class "metric ram" 
       :space-evenly true 
    (box :class "label ram" "")
    (box {round(EWW_RAM.used_mem_perc, 0)} "%")

  )
)

(defwidget time []
  (box :orientation "h" 
       :class "metric time" 
       :spacing 0
       :space-evenly true 
    (box :space-evenly false
      (box :class "label clock" "󰥔")
      (box  hour)
      (box  ":")
      (box minute)
    )
  )
)

(defwidget sidestuff []
  (box :class "sidestuff" :orientation "h" 
    :space-evenly false
    :halign "end"
    (volume_slider)
    (cpu_info)
    (memory_info)
    (time)

    ;; (metric :label ""
    ;;         :value battery
    ;;         :onchange "")

   (box :class "widgetbutton"
       :space-evenly false
       :valign "center"
       :halign "center"
     (button :class "powerbutton" :onclick "eww open power" "󰐥")
     ))
)
  

(defwidget metric [label value onchange]
  (box :orientation "h"
       :class "metric"
       :space-evenly true
    (box :class "label" label)
    (scale :min 0
           :max 101
           :active {onchange != ""}
           :value value
           :onchange onchange)))

  
  

(defwidget widgetbutton [label value onclick]
  (box :orientation "v"
      :class "widgetbutton"
      :space-evenly true
      :valign: "center"
    (box :class "label" label)))
  


(defwidget workspaces []
 (literal :content workspace))



(defwindow bar
  :stacking "bg"
  :exclusive true
  :monitor 1
  :windowtype "dock"
  :geometry (geometry 
                  :x "0%"
                  :y "0%"
                  :width "95%"
                  :height "35px"
                  :anchor "top center")
  :reserve (struts :side "top" :distance "4%")
  (box :class "assbox" 
    (workspaces)
    (sidestuff)))
    
  


(defwindow homebase
  :stacking "fg"
  :monitor 0
  :exclusive false
  :windowtipe "dock"
  :geometry (geometry
             :x "0%"
             :y "0%"
             :width "100%"
             :height "100%"
             :anchor "center")
 (homebasebox))

(defwidget homebasebox []
  (box :class "homebasebox"
    :orientation "v"
    :spacing 15
    :space-evenly true
    :spacing 10
    (powerbuttonbox)
    (powerbuttonbox)))
  


(defwindow power
  :monitor 1
  :exclusive false
  :windowtype "dock"
  :geometry (geometry
             :x "0%"
             :y "0%"
             :width "100%"
             :height "100%"
             :anchor "center")
  (box
   (powerbuttonbox)))
  


(defwidget powerbuttonbox [] 
  (box :class "powerbuttonbox" 
    :orientation "v"
    :spacing 15
      :space-evenly true
      :spacing 10
    (button :class "widgetbutton" :onclick "reboot" "reboot")
    (button :class "widgetbutton" "log out")
    (button :class "widgetbutton" :onclick "shutdown now" "shutdown")
    (button :class "widgetbutton" :onclick "eww close power" "exit")))
