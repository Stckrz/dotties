(defwidget sidestuff []
  (box :class "sidestuff" :orientation "h" 
    :space-evenly false
    :halign "end"
    (metric :label "Óò∏"
            :value volume
            :onchange "amixer sset 'Master' {}%")
    (metric :label "ÔâÄ"
            :value battery
            :onchange "")
    (metric :label "Û∞çõ"
            :value {EWW_RAM.used_mem_perc}
            :onchange "")
    ;; (metric :label "üíæ"
    ;;         :value {round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}
    ;;         :onchange "")
    (metric :label "Ôíº"
            :value {EWW_CPU.avg}
            :onchange "")
    time

  (box :class "widgetbutton"
      :space-evenly false
      :valign "center"
      :halign "center"
    (button :onclick "eww open power" "Û∞ê•"))
  ))

(defwidget workspaces []
  (box :class "workspaces"
       :orientation "h"
       :space-evenly true
       :halign "start"
       :spacing 10
    (button :class {active_workspace == 1 ? "active" : "inactive"} :onclick "hyprctl dispatch workspace 1" )
    (button :class {active_workspace == 2 ? "active" : "inactive"} :onclick "hyprctl dispatch workspace 2" )
    (button :class {active_workspace == 3 ? "active" : "inactive"} :onclick "hyprctl dispatch workspace 3" )
    (button :class {active_workspace == 4 ? "active" : "inactive"} :onclick "hyprctl dispatch workspace 4" )
    (button :class {active_workspace == 5 ? "active" : "inactive"} :onclick "hyprctl dispatch workspace 5" )
    (button :class {active_workspace == 6 ? "active" : "inactive"} :onclick "hyprctl dispatch workspace 6" )
    (button :class {active_workspace == 7 ? "active" : "inactive"} :onclick "hyprctl dispatch workspace 7" )
    (button :class {active_workspace == 8 ? "active" : "inactive"} :onclick "hyprctl dispatch workspace 8" )
    (button :class {active_workspace == 9 ? "active" : "inactive"} :onclick "hyprctl dispatch workspace 9" )
    ))

(defwidget metric [label value onchange]
  (box :orientation "h"
       :class "metric"
       :space-evenly true
      ;; :valign: "start"
    (box :class "label" label)
    (scale :min 0
           :max 101
           :active {onchange != ""}
           :value value
           :onchange onchange)))

(defwidget widgetbutton [label value onclick]
  (box :orientation "v"
      :class "widgetbutton"
      :space-evenly true
      :valign: "center"
    (box :class "label" label)
  )
)

(defwidget maybes []
(literal :content maybe)
)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;variables;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defpoll volume :interval "1s"
  "scripts/getvol")

(defpoll time :interval "10s"
  "date '+%I:%M %p %b %d, %Y'")

(defpoll battery :interval "1s"
  "scripts/getvol"
)

;;returns which workspace is the active workspace
(defpoll active_workspace :interval "0.5s"
	"hyprctl -j activeworkspace | grep -oP '(?<=\"id\":\\s)(\\d+)'")
(defpoll maybescript :interval "0.5s"
  "scripts/maybe"
)

(defpoll workspaces_with_content :interval "1s"
	"hyprctl -j workspaces | grep -oP '(?<=\"id\":\\s)(\\d+)'")

(deflisten maybe
  "scripts/maybe"
)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;Windows;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defwindow bar
  :stacking "bg"
  :exclusive true
  :monitor 0
  :windowtype "dock"
  :geometry (geometry 
                  :x "0%"
                  :y "0%"
                  :width "100%"
                  :height "35px"
                  :anchor "top center")
  :reserve (struts :side "top" :distance "4%")
  (box :class "assbox" 
    (maybes)
    (sidestuff)
    
  )
)

(defwindow homebase
  :stacking "fg"
  :monitor 0
  :exclusive false
  :windowtipe "dock"
  :geometry (geometry
    :x "0%"
    :y "0%"
    :width "100%"
    :height "100%"
    :anchor "center")
(homebasebox)
)
(defwidget homebasebox []
  (box :class "homebasebox"
    :orientation "v"
    :spacing 15
    :space-evenly true
    :spacing 10
    (powerbuttonbox)
    (powerbuttonbox)
  )
)

(defwindow power
  :monitor 0
  :exclusive false
  :windowtype "dock"
  :geometry (geometry
    :x "0%"
    :y "0%"
    :width "100%"
    :height "100%"
    :anchor "center")
  (box
  (powerbuttonbox)
  )
)

(defwidget powerbuttonbox [] 
  (box :class "powerbuttonbox" 
    :orientation "v"
    :spacing 15
      :space-evenly true
      :spacing 10
    (button :class "widgetbutton" :onclick "reboot" "reboot")
    (button :class "widgetbutton" "log out")
    (button :class "widgetbutton" :onclick "shutdown now" "shutdown")
    (button :class "widgetbutton" :onclick "eww close power" "exit")
  )
)
